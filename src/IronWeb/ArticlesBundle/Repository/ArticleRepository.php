<?php

namespace IronWeb\ArticlesBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;
use IronWeb\ArticlesBundle\Entity\Article;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends EntityRepository
{
    /**
     * It returns an object or array representation of an Article with its answers and author
     * @param $id int
     * @param bool $returnArray
     * @return array|Article
     */
    public function getOneById($id, $returnArray = true){
        /**
         * This options was taken to take advantage of the AVG function inside the database to calculate
         * the average rating of an article
        */
        $raw_query = "
                    SELECT 
                        a.id as article_id,
                        a.title as article_title,
                        a.body as article_body,
                        a.created_at as article_created_at,
                        ROUND(AVG(aur.rating),1) as article_rating,
                        u.id as article_user_id,
                        u.email as article_user_email,
                        an.id as answer_id,
                        an.body as answer_body,
                        an.created_at as answer_created_at,
                        anu.id as answer_user_id,
                        anu.email as answer_user_email
                    FROM article a
                    LEFT JOIN article_user_rating aur ON a.id = aur.article_id
                    LEFT JOIN user u ON u.id = a.user_id
                    LEFT JOIN answer an ON an.article_id = a.id
                    LEFT JOIN user anu ON anu.id = an.user_id
                    WHERE a.id= :id
                    GROUP BY an.id";
        $rsm  = new ResultSetMapping();
        $rsm->addEntityResult("IronWebArticlesBundle:Article","a")
            ->addFieldResult("a","article_id","id")
            ->addFieldResult("a","article_title","title")
            ->addFieldResult("a","article_body","body")
            ->addFieldResult("a","article_created_at","createdAt")
            ->addMetaResult("a","article_rating","rating")
            ->addJoinedEntityResult("IronWebArticlesBundle:User","u","a","user")
            ->addFieldResult("u","article_user_id","id")
            ->addFieldResult("u","article_user_email","email")
            ->addJoinedEntityResult("IronWebArticlesBundle:Answer","an","a","answers")
            ->addFieldResult("an","answer_id","id")
            ->addFieldResult("an","answer_body","body")
            ->addFieldResult("an","answer_created_at","createdAt")
            ->addJoinedEntityResult("IronWebArticlesBundle:User","anu","an","user")
            ->addFieldResult("anu","answer_user_id","id")
            ->addFieldResult("anu","answer_user_email","email");

        $query = $this->getEntityManager()->createNativeQuery($raw_query,$rsm);
        $query->setParameter("id",$id);

        return $returnArray ?  $query->getArrayResult() : $query->getOneOrNullResult();
    }

    /**
     * @param $userId
     * @param bool $returnArray
     * @return array|mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getAllByUserId($userId, $returnArray = true){
        $raw_query = "
                    SELECT 
                        a.id as article_id,
                        a.title as article_title,
                        a.body as article_body,
                        a.created_at as article_created_at,
                        ROUND(AVG(aur.rating),1) as article_rating,
                        u.id as article_user_id,
                        u.email as article_user_email,
                        an.id as answer_id,
                        an.body as answer_body,
                        an.seen_by_article_author as answer_seen_by_article_author,
                        an.created_at as answer_created_at,
                        anu.id as answer_user_id,
                        anu.email as answer_user_email
                    FROM article a
                    LEFT JOIN article_user_rating aur ON a.id = aur.article_id
                    LEFT JOIN user u ON u.id = a.user_id
                    LEFT JOIN answer an ON an.article_id = a.id
                    LEFT JOIN user anu ON anu.id = an.user_id
                    WHERE a.user_id= :id
                    GROUP BY an.id";
        $rsm  = new ResultSetMapping();
        $rsm->addEntityResult("IronWebArticlesBundle:Article","a")
            ->addFieldResult("a","article_id","id")
            ->addFieldResult("a","article_title","title")
            ->addFieldResult("a","article_body","body")
            ->addFieldResult("a","article_created_at","createdAt")
            ->addMetaResult("a","article_rating","rating")
            ->addJoinedEntityResult("IronWebArticlesBundle:User","u","a","user")
            ->addFieldResult("u","article_user_id","id")
            ->addFieldResult("u","article_user_email","email")
            ->addJoinedEntityResult("IronWebArticlesBundle:Answer","an","a","answers")
            ->addFieldResult("an","answer_id","id")
            ->addFieldResult("an","answer_body","body")
            ->addFieldResult("an","answer_seen_by_article_author","seenByArticleAuthor")
            ->addFieldResult("an","answer_created_at","createdAt")
            ->addJoinedEntityResult("IronWebArticlesBundle:User","anu","an","user")
            ->addFieldResult("anu","answer_user_id","id")
            ->addFieldResult("anu","answer_user_email","email");

        $query = $this->getEntityManager()->createNativeQuery($raw_query,$rsm);
        $query->setParameter("id",$userId);

        return $returnArray ?  $query->getArrayResult() : $query->getOneOrNullResult();
    }
}
